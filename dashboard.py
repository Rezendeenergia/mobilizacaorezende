import streamlit as st
import requests
from msal import ConfidentialClientApplication
import pandas as pd
import io
from datetime import datetime
import sqlite3
import openpyxl
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.units import cm
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER, TA_LEFT
import os

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Sistema de Avalia√ß√£o - Rezende Energia",
    page_icon="üìã",
    layout="wide"
)

# CSS customizado com as cores da empresa
st.markdown("""
    <style>
    .main {
        background-color: #ffffff;
    }
    .stButton>button {
        background-color: #F7931E;
        color: #000000;
        font-weight: bold;
        border: 2px solid #000000;
        border-radius: 5px;
        padding: 10px 24px;
    }
    .stButton>button:hover {
        background-color: #000000;
        color: #F7931E;
        border: 2px solid #F7931E;
    }
    h1, h2, h3 {
        color: #000000;
    }
    .highlight {
        background-color: #F7931E;
        color: #000000;
        padding: 10px;
        border-radius: 5px;
        font-weight: bold;
    }
    </style>
""", unsafe_allow_html=True)

# Credenciais Azure AD (usando st.secrets)
try:
    CLIENT_ID = st.secrets["azure"]["client_id"]
    CLIENT_SECRET = st.secrets["azure"]["client_secret"]
    TENANT_ID = st.secrets["azure"]["tenant_id"]
    LOGO_PATH = st.secrets["paths"]["logo_path"]
except KeyError as e:
    st.error(f"‚ö†Ô∏è Configura√ß√£o faltando no secrets: {e}")
    st.info("Por favor, configure o arquivo .streamlit/secrets.toml")
    st.stop()
except FileNotFoundError:
    st.error("‚ö†Ô∏è Arquivo secrets.toml n√£o encontrado!")
    st.info("Crie o arquivo .streamlit/secrets.toml na raiz do projeto")
    st.stop()


# Fun√ß√£o para gerar PDF da avalia√ß√£o
def gerar_pdf_avaliacao(dados_avaliacao, nome_arquivo=None):
    """
    Gera um PDF da avalia√ß√£o com a logo da empresa
    dados_avaliacao: dicion√°rio com os dados da avalia√ß√£o
    """
    if nome_arquivo is None:
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        nome_arquivo = f"Avaliacao_{dados_avaliacao['colaborador'].replace(' ', '_')}_{timestamp}.pdf"

    # Criar buffer para o PDF
    buffer = io.BytesIO()

    # Configurar documento
    doc = SimpleDocTemplate(
        buffer,
        pagesize=A4,
        rightMargin=2 * cm,
        leftMargin=2 * cm,
        topMargin=2 * cm,
        bottomMargin=2 * cm
    )

    # Container para elementos do PDF
    elements = []

    # Estilos
    styles = getSampleStyleSheet()

    # Estilo customizado para t√≠tulo
    titulo_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        textColor=colors.HexColor('#000000'),
        spaceAfter=30,
        alignment=TA_CENTER,
        fontName='Helvetica-Bold'
    )

    # Estilo para subt√≠tulos
    subtitulo_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Heading2'],
        fontSize=14,
        textColor=colors.HexColor('#F7931E'),
        spaceAfter=12,
        spaceBefore=12,
        fontName='Helvetica-Bold'
    )

    # Estilo para texto normal
    texto_style = ParagraphStyle(
        'CustomBody',
        parent=styles['BodyText'],
        fontSize=10,
        textColor=colors.HexColor('#000000'),
        alignment=TA_LEFT,
        fontName='Helvetica'
    )

    # Adicionar logo se existir
    if os.path.exists(LOGO_PATH):
        try:
            logo = Image(LOGO_PATH, width=3 * cm, height=1.5 * cm)
            logo.hAlign = 'CENTER'
            elements.append(logo)
            elements.append(Spacer(1, 0.5 * cm))
        except Exception as e:
            st.warning(f"N√£o foi poss√≠vel adicionar a logo: {e}")

    # T√≠tulo
    elements.append(Paragraph("FICHA DE AVALIA√á√ÉO DE EXPERI√äNCIA", titulo_style))
    elements.append(Spacer(1, 0.5 * cm))

    # Informa√ß√µes b√°sicas
    data_atual = datetime.now().strftime('%d/%m/%Y')

    info_basica = [
        ['Data da Avalia√ß√£o:', data_atual],
        ['Tipo de Avalia√ß√£o:', dados_avaliacao['tipo_avaliacao']],
        ['', ''],
        ['Avaliador:', dados_avaliacao['avaliador']],
        ['Cargo do Avaliador:', dados_avaliacao['cargo_avaliador']],
        ['', ''],
        ['Colaborador:', dados_avaliacao['colaborador']],
        ['Cargo do Colaborador:', dados_avaliacao['cargo']],
    ]

    table_info = Table(info_basica, colWidths=[5 * cm, 12 * cm])
    table_info.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#F7931E')),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.HexColor('#000000')),
        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('PADDING', (0, 0), (-1, -1), 8),
    ]))

    elements.append(table_info)
    elements.append(Spacer(1, 0.8 * cm))

    # Crit√©rios de avalia√ß√£o
    elements.append(Paragraph("CRIT√âRIOS DE AVALIA√á√ÉO", subtitulo_style))
    elements.append(Spacer(1, 0.3 * cm))

    criterios = [
        ('ADAPTA√á√ÉO AO TRABALHO', dados_avaliacao['adaptacao']),
        ('INTERESSE', dados_avaliacao['interesse']),
        ('RELACIONAMENTO SOCIAL', dados_avaliacao['relacionamento']),
        ('CAPACIDADE DE APRENDIZAGEM', dados_avaliacao['capacidade']),
    ]

    for titulo, resposta in criterios:
        elements.append(Paragraph(f"<b>{titulo}</b>", texto_style))
        elements.append(Spacer(1, 0.2 * cm))

        # Criar tabela para a resposta
        resposta_table = Table([[resposta]], colWidths=[17 * cm])
        resposta_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, -1), colors.HexColor('#F5F5F5')),
            ('GRID', (0, 0), (-1, -1), 1, colors.grey),
            ('PADDING', (0, 0), (-1, -1), 10),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ]))
        elements.append(resposta_table)
        elements.append(Spacer(1, 0.4 * cm))

    # Classifica√ß√£o e Defini√ß√£o
    elements.append(Spacer(1, 0.3 * cm))

    classificacao_def = [
        ['Classifica√ß√£o Geral:', dados_avaliacao['classificacao']],
        ['Defini√ß√£o:', dados_avaliacao['definicao']],
    ]

    table_final = Table(classificacao_def, colWidths=[5 * cm, 12 * cm])
    table_final.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#F7931E')),
        ('TEXTCOLOR', (0, 0), (0, -1), colors.HexColor('#000000')),
        ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 10),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
        ('PADDING', (0, 0), (-1, -1), 8),
    ]))

    elements.append(table_final)
    elements.append(Spacer(1, 1.5 * cm))

    # Assinaturas
    assinaturas = [
        ['_' * 40, '_' * 40],
        ['Assinatura do Avaliador', 'Assinatura do Presidente'],
    ]

    table_assinatura = Table(assinaturas, colWidths=[8.5 * cm, 8.5 * cm])
    table_assinatura.setStyle(TableStyle([
        ('FONTSIZE', (0, 0), (-1, -1), 9),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('VALIGN', (0, 0), (-1, -1), 'TOP'),
    ]))

    elements.append(table_assinatura)

    # Construir PDF
    doc.build(elements)

    # Retornar buffer
    buffer.seek(0)
    return buffer, nome_arquivo


# Inicializar banco de dados
def init_db():
    conn = sqlite3.connect('avaliacoes.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS avaliacoes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            avaliador TEXT NOT NULL,
            colaborador TEXT NOT NULL,
            cargo TEXT,
            cargo_avaliador TEXT,
            regional TEXT,
            tipo_avaliacao TEXT,
            adaptacao TEXT,
            interesse TEXT,
            relacionamento TEXT,
            capacidade TEXT,
            classificacao TEXT,
            definicao TEXT,
            data_avaliacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    # Verificar e adicionar coluna cargo_avaliador se n√£o existir
    try:
        c.execute("SELECT cargo_avaliador FROM avaliacoes LIMIT 1")
    except sqlite3.OperationalError:
        # Coluna n√£o existe, vamos adicion√°-la
        c.execute("ALTER TABLE avaliacoes ADD COLUMN cargo_avaliador TEXT")
        conn.commit()

    conn.close()


# Salvar avalia√ß√£o no banco
def salvar_avaliacao(dados):
    conn = sqlite3.connect('avaliacoes.db')
    c = conn.cursor()
    c.execute('''
        INSERT INTO avaliacoes (
            avaliador, colaborador, cargo, cargo_avaliador, regional, tipo_avaliacao,
            adaptacao, interesse, relacionamento, capacidade, 
            classificacao, definicao
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', dados)
    conn.commit()
    conn.close()


# Buscar avalia√ß√µes do banco
def buscar_avaliacoes():
    conn = sqlite3.connect('avaliacoes.db')
    df = pd.read_sql_query("SELECT * FROM avaliacoes ORDER BY data_avaliacao DESC", conn)
    conn.close()
    return df


# Verificar se colaborador j√° foi avaliado
def ja_foi_avaliado(colaborador, tipo_avaliacao):
    conn = sqlite3.connect('avaliacoes.db')
    c = conn.cursor()
    c.execute('''
        SELECT COUNT(*) FROM avaliacoes 
        WHERE colaborador = ? AND tipo_avaliacao = ?
    ''', (colaborador, tipo_avaliacao))
    count = c.fetchone()[0]
    conn.close()
    return count > 0


# Baixar dados do SharePoint
@st.cache_data(ttl=3600)
def download_excel_sharepoint():
    try:
        app = ConfidentialClientApplication(
            CLIENT_ID,
            authority=f"https://login.microsoftonline.com/{TENANT_ID}",
            client_credential=CLIENT_SECRET,
        )

        result = app.acquire_token_for_client(scopes=["https://graph.microsoft.com/.default"])

        if "access_token" in result:
            headers = {"Authorization": f"Bearer {result['access_token']}"}

            site_url = "https://graph.microsoft.com/v1.0/sites/rezendeenergia.sharepoint.com:/sites/Intranet"
            site_response = requests.get(site_url, headers=headers)

            if site_response.status_code == 200:
                site_data = site_response.json()
                site_id = site_data['id']

                search_url = f"https://graph.microsoft.com/v1.0/sites/{site_id}/drive/root/search(q='Base de Colaboradores - Rezende Energia')"
                search_response = requests.get(search_url, headers=headers)

                if search_response.status_code == 200:
                    search_data = search_response.json()
                    files_found = search_data.get('value', [])

                    for item in files_found:
                        if 'Base de Colaboradores - Rezende Energia' in item['name']:
                            download_url = f"https://graph.microsoft.com/v1.0/sites/{site_id}/drive/items/{item['id']}/content"
                            download_response = requests.get(download_url, headers=headers)

                            if download_response.status_code == 200:
                                df = pd.read_excel(io.BytesIO(download_response.content))
                                return df
        return None
    except Exception as e:
        st.error(f"Erro ao baixar dados: {e}")
        return None


# Identificar avaliadores
def identificar_avaliadores(df):
    cargos_avaliadores = ['SUPERVISOR', 'LIDER DE FROTA', 'GERENTE OPERACIONAL', 'COORDENADOR OPERACIONAL']
    avaliadores = df[df.iloc[:, 8].str.upper().isin(cargos_avaliadores)]
    return sorted(avaliadores.iloc[:, 0].tolist())


# Identificar colaboradores para avalia√ß√£o
def identificar_colaboradores_para_avaliacao(df):
    hoje = datetime.now()
    colaboradores_40_dias = []
    colaboradores_80_dias = []

    for idx, row in df.iterrows():
        try:
            nome = row.iloc[0]
            data_admissao = pd.to_datetime(row.iloc[9])
            dias_desde_admissao = (hoje - data_admissao).days

            if 37 <= dias_desde_admissao <= 43:
                colaboradores_40_dias.append({
                    'nome': nome,
                    'data_admissao': data_admissao.strftime('%d/%m/%Y'),
                    'dias_empresa': dias_desde_admissao
                })
            elif 77 <= dias_desde_admissao <= 83:
                colaboradores_80_dias.append({
                    'nome': nome,
                    'data_admissao': data_admissao.strftime('%d/%m/%Y'),
                    'dias_empresa': dias_desde_admissao
                })
        except:
            continue

    return colaboradores_40_dias, colaboradores_80_dias


# Inicializar banco de dados
init_db()

# Header
st.title("üìã Sistema de Avalia√ß√£o de Experi√™ncia")
st.markdown("### Rezende Energia")
st.markdown("---")

# Sidebar - Menu
menu = st.sidebar.selectbox(
    "Menu",
    ["Dashboard", "Nova Avalia√ß√£o", "Hist√≥rico de Avalia√ß√µes"]
)

# Carregar dados
with st.spinner("Carregando dados do SharePoint..."):
    df = download_excel_sharepoint()

if df is None:
    st.error("‚ùå Erro ao carregar dados do SharePoint. Verifique as credenciais.")
    st.stop()

# DASHBOARD
if menu == "Dashboard":
    st.header("üìä Dashboard de Avalia√ß√µes")

    avaliadores = identificar_avaliadores(df)
    colab_40, colab_80 = identificar_colaboradores_para_avaliacao(df)

    # M√©tricas
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("üë• Avaliadores", len(avaliadores))

    with col2:
        st.metric("üìã Avalia√ß√µes 40 dias", len(colab_40))

    with col3:
        st.metric("üìã Avalia√ß√µes 80 dias", len(colab_80))

    with col4:
        total_avaliacoes = len(buscar_avaliacoes())
        st.metric("‚úÖ Avalia√ß√µes Realizadas", total_avaliacoes)

    st.markdown("---")

    # Colaboradores pendentes
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üïê Avalia√ß√µes de 40 dias pendentes")
        if colab_40:
            for col in colab_40:
                avaliado = ja_foi_avaliado(col['nome'], "40 dias")
                status = "‚úÖ" if avaliado else "‚è≥"
                st.write(
                    f"{status} **{col['nome']}** - Admitido em {col['data_admissao']} ({col['dias_empresa']} dias)")
        else:
            st.info("Nenhum colaborador no per√≠odo de 40 dias")

    with col2:
        st.subheader("üïê Avalia√ß√µes de 80 dias pendentes")
        if colab_80:
            for col in colab_80:
                avaliado = ja_foi_avaliado(col['nome'], "80 dias")
                status = "‚úÖ" if avaliado else "‚è≥"
                st.write(
                    f"{status} **{col['nome']}** - Admitido em {col['data_admissao']} ({col['dias_empresa']} dias)")
        else:
            st.info("Nenhum colaborador no per√≠odo de 80 dias")

# NOVA AVALIA√á√ÉO
elif menu == "Nova Avalia√ß√£o":
    st.header("üìù Nova Avalia√ß√£o de Experi√™ncia")

    avaliadores = identificar_avaliadores(df)
    todos_colaboradores = sorted(df.iloc[:, 0].dropna().tolist())

    st.subheader("Informa√ß√µes B√°sicas")

    col1, col2 = st.columns(2)

    with col1:
        avaliador = st.selectbox("Supervisor/Coordenador (Avaliador) *", avaliadores)
        # Buscar cargo do avaliador
        cargo_avaliador = ""
        if avaliador:
            linha_avaliador = df[df.iloc[:, 0] == avaliador]
            if not linha_avaliador.empty:
                cargo_avaliador = str(linha_avaliador.iloc[0, 8]) if pd.notna(linha_avaliador.iloc[0, 8]) else ""
        st.text_input("Cargo do Avaliador", value=cargo_avaliador, disabled=True, key="cargo_avaliador_display")

    with col2:
        colaborador = st.selectbox("Nome do colaborador *", todos_colaboradores)
        # Buscar cargo do colaborador selecionado automaticamente
        cargo_colaborador = ""
        if colaborador:
            linha_colaborador = df[df.iloc[:, 0] == colaborador]
            if not linha_colaborador.empty:
                cargo_colaborador = str(linha_colaborador.iloc[0, 8]) if pd.notna(linha_colaborador.iloc[0, 8]) else ""
        st.text_input("Cargo do Colaborador *", value=cargo_colaborador, disabled=True, key="cargo_colaborador_display")

    tipo_avaliacao = st.radio("Avalia√ß√£o de:", ["40 dias", "80 dias"])

    with st.form("formulario_avaliacao"):
        cargo = cargo_colaborador  # Usar o cargo j√° identificado

        st.markdown("---")
        st.subheader("Crit√©rios de Avalia√ß√£o")

        # Adapta√ß√£o ao Trabalho
        st.markdown("**ADAPTA√á√ÉO AO TRABALHO**")
        adaptacao = st.radio(
            "Selecione uma op√ß√£o:",
            [
                "Est√° plenamente identificado com as atividades do seu cargo, e integrou-se perfeitamente √†s normas da empresa.",
                "Tem feito o poss√≠vel para integrar-se n√£o s√≥ ao pr√≥prio trabalho, como tamb√©m √†s caracter√≠sticas da empresa.",
                "Precisa modificar radicalmente suas caracter√≠sticas pessoais para conseguir integrar-se ao trabalho e aos requisitos administrativos da empresa.",
                "Mant√©m um comportamento oposto ao solicitado para o seu cargo e demonstra ter s√©rias dificuldades de aceita√ß√£o das caracter√≠sticas da empresa."
            ],
            key="adaptacao"
        )

        # Interesse
        st.markdown("**INTERESSE**")
        interesse = st.radio(
            "Selecione uma op√ß√£o:",
            [
                "Apresenta um entusiasmo adequado, tendo em vista o seu pouco tempo de casa.",
                "Parece muito interessado(a) por seu novo emprego.",
                "Passa a impress√£o de ser um colaborador(a) que no futuro necessitar√° de constante est√≠mulo para poder interessar-se por seu trabalho.",
                "√â indiferente, apresentando uma falta total de entusiasmo e vontade de trabalhar."
            ],
            key="interesse"
        )

        # Relacionamento Social
        st.markdown("**RELACIONAMENTO SOCIAL**")
        relacionamento = st.radio(
            "Selecione uma op√ß√£o:",
            [
                "Apresentou grande habilidade em conseguir amigos, mesmo com pouco tempo de casa, todos j√° gostam muito dele(a).",
                "Entrosou-se bem com os demais, foi aceito(a) sem resist√™ncia.",
                "Est√° fazendo muita for√ßa para conseguir maior integra√ß√£o social com os colegas.",
                "Sente-se perdido(a) entre os colegas, parece n√£o ter sido aceito(a) pelo grupo de trabalho."
            ],
            key="relacionamento"
        )

        # Capacidade de Aprendizagem
        st.markdown("**CAPACIDADE DE APRENDIZAGEM**")
        capacidade = st.radio(
            "Selecione uma op√ß√£o:",
            [
                "Parece habilitado(a) para o cargo em que est√°, tem facilidade para aprender, permitindo-lhe executar sem falhas.",
                "Parece adequado(a) para o cargo ao qual foi encaminhado(a), aprende suas tarefas sem problemas.",
                "Consegue aprender o que lhe foi ensinado √† custa de grande esfor√ßo pessoal, necess√°rio repetir-se a mesma coisa v√°rias vezes.",
                "Parece n√£o ter a m√≠nima capacidade para o trabalho."
            ],
            key="capacidade"
        )

        # Classifica√ß√£o Geral
        st.markdown("**De maneira geral como o colaborador (a) pode ser classificado?**")
        classificacao = st.radio(
            "Selecione uma op√ß√£o:",
            [
                "Trata-se de excelente aquisi√ß√£o para a empresa",
                "Constitui Elemento com boas possibilidades futuras",
                "Tem possibilidades Rotineiras",
                "Fraco"
            ],
            key="classificacao"
        )

        # Defini√ß√£o
        st.markdown("**Qual a defini√ß√£o a ser tomada?**")
        definicao = st.radio(
            "Selecione uma op√ß√£o:",
            [
                "Prorrogar o contrato de trabalho",
                "Encaminh√°-lo para treinamento",
                "Demitir"
            ],
            key="definicao"
        )

        st.markdown("---")
        submitted = st.form_submit_button("üíæ Salvar Avalia√ß√£o e Gerar PDF", use_container_width=True)

    # Processar fora do formul√°rio
    if submitted:
        if not cargo:
            st.error("‚ö†Ô∏è Por favor, selecione um colaborador v√°lido!")
        else:
            # Salvar no banco
            dados = (
                avaliador, colaborador, cargo, cargo_avaliador, "", tipo_avaliacao,
                adaptacao, interesse, relacionamento, capacidade,
                classificacao, definicao
            )
            salvar_avaliacao(dados)

            # Gerar PDF
            dados_pdf = {
                'avaliador': avaliador,
                'cargo_avaliador': cargo_avaliador,
                'colaborador': colaborador,
                'cargo': cargo,
                'tipo_avaliacao': tipo_avaliacao,
                'adaptacao': adaptacao,
                'interesse': interesse,
                'relacionamento': relacionamento,
                'capacidade': capacidade,
                'classificacao': classificacao,
                'definicao': definicao
            }

            try:
                pdf_buffer, pdf_nome = gerar_pdf_avaliacao(dados_pdf)

                st.success(f"‚úÖ Avalia√ß√£o de {colaborador} salva com sucesso!")
                st.balloons()

                # Bot√£o de download do PDF
                st.download_button(
                    label="üìÑ Download PDF da Avalia√ß√£o",
                    data=pdf_buffer,
                    file_name=pdf_nome,
                    mime="application/pdf",
                    use_container_width=True
                )

            except Exception as e:
                st.error(f"‚ùå Erro ao gerar PDF: {e}")
                st.info("A avalia√ß√£o foi salva, mas o PDF n√£o p√¥de ser gerado.")

# HIST√ìRICO DE AVALIA√á√ïES
elif menu == "Hist√≥rico de Avalia√ß√µes":
    st.header("üìö Hist√≥rico de Avalia√ß√µes")

    avaliacoes_df = buscar_avaliacoes()

    if len(avaliacoes_df) > 0:
        st.markdown(f"**Total de avalia√ß√µes registradas:** {len(avaliacoes_df)}")

        # Filtros
        col1, col2, col3 = st.columns(3)

        with col1:
            filtro_avaliador = st.multiselect(
                "Filtrar por Avaliador",
                options=avaliacoes_df['avaliador'].unique()
            )

        with col2:
            filtro_tipo = st.multiselect(
                "Filtrar por Tipo",
                options=avaliacoes_df['tipo_avaliacao'].unique()
            )

        with col3:
            filtro_definicao = st.multiselect(
                "Filtrar por Defini√ß√£o",
                options=avaliacoes_df['definicao'].unique()
            )

        # Aplicar filtros
        df_filtrado = avaliacoes_df.copy()

        if filtro_avaliador:
            df_filtrado = df_filtrado[df_filtrado['avaliador'].isin(filtro_avaliador)]

        if filtro_tipo:
            df_filtrado = df_filtrado[df_filtrado['tipo_avaliacao'].isin(filtro_tipo)]

        if filtro_definicao:
            df_filtrado = df_filtrado[df_filtrado['definicao'].isin(filtro_definicao)]

        st.markdown("---")

        # Mostrar detalhes das avalia√ß√µes
        for idx, row in df_filtrado.iterrows():
            with st.expander(f"üìã {row['colaborador']} - {row['tipo_avaliacao']} (Avaliado por: {row['avaliador']})"):
                col1, col2 = st.columns(2)

                with col1:
                    st.write(f"**Cargo:** {row['cargo']}")
                    st.write(f"**Data:** {row['data_avaliacao']}")
                    st.write(f"**Classifica√ß√£o:** {row['classificacao']}")

                with col2:
                    st.write(f"**Defini√ß√£o:** {row['definicao']}")
                    st.write(f"**Adapta√ß√£o:** {row['adaptacao'][:50]}...")
                    st.write(f"**Interesse:** {row['interesse'][:50]}...")

                # Bot√£o para gerar PDF da avalia√ß√£o hist√≥rica
                if st.button(f"üìÑ Gerar PDF", key=f"pdf_{idx}"):
                    dados_pdf = {
                        'avaliador': row['avaliador'],
                        'cargo_avaliador': row.get('cargo_avaliador', ''),
                        'colaborador': row['colaborador'],
                        'cargo': row['cargo'],
                        'tipo_avaliacao': row['tipo_avaliacao'],
                        'adaptacao': row['adaptacao'],
                        'interesse': row['interesse'],
                        'relacionamento': row['relacionamento'],
                        'capacidade': row['capacidade'],
                        'classificacao': row['classificacao'],
                        'definicao': row['definicao']
                    }

                    try:
                        pdf_buffer, pdf_nome = gerar_pdf_avaliacao(dados_pdf)

                        st.download_button(
                            label="‚¨áÔ∏è Download PDF",
                            data=pdf_buffer,
                            file_name=pdf_nome,
                            mime="application/pdf",
                            key=f"download_pdf_{idx}"
                        )
                    except Exception as e:
                        st.error(f"Erro ao gerar PDF: {e}")

        st.markdown("---")

        # Baixar hist√≥rico em Excel
        if st.button("üì• Baixar Hist√≥rico (Excel)", use_container_width=True):
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df_filtrado.to_excel(writer, index=False, sheet_name='Avalia√ß√µes')

            st.download_button(
                label="‚¨áÔ∏è Download",
                data=output.getvalue(),
                file_name=f"historico_avaliacoes_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
    else:
        st.info("Nenhuma avalia√ß√£o registrada ainda.")

# Footer
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: #666;'>Sistema de Avalia√ß√£o de Experi√™ncia - Rezende Energia ¬© 2025</div>",
    unsafe_allow_html=True
)
